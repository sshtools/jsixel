package com.sshtools.jsixel.lib;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
/**
 * JNA Wrapper for library <b>sixel</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface SixelLibrary extends Library {
	
	
	public static final String JNA_LIBRARY_NAME = "sixel";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(SixelLibrary.JNA_LIBRARY_NAME);
	public static final SixelLibrary INSTANCE = (SixelLibrary)Native.load(SixelLibrary.JNA_LIBRARY_NAME, SixelLibrary.class);
	
	@SuppressWarnings("serial")
	public static class SizeT extends com.sun.jna.IntegerType {
	  public SizeT() { this(0); }
	  public SizeT(long value) { super(Native.SIZE_T_SIZE, value, true); }
	}
	
	/**
	 * output character size<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:7</i><br>
	 * enum values
	 */
	public static interface characterSize {
		/**
		 * 7bit character<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:5</i>
		 */
		public static final int CSIZE_7BIT = 0;
		/**
		 * 8bit character<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:6</i>
		 */
		public static final int CSIZE_8BIT = 1;
	};
	/**
	 * method for finding the largest dimension for splitting,<br>
	 * and sorting by that component<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:17</i><br>
	 * enum values
	 */
	public static interface methodForLargest {
		/**
		 * choose automatically the method for finding the largest<br>
		 * dimension<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:14</i>
		 */
		public static final int LARGE_AUTO = 0;
		/**
		 * simply comparing the range in RGB space<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:15</i>
		 */
		public static final int LARGE_NORM = 1;
		/**
		 * transforming into luminosities before the comparison<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:16</i>
		 */
		public static final int LARGE_LUM = 2;
	};
	/**
	 * method for choosing a color from the box<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:26</i><br>
	 * enum values
	 */
	public static interface methodForRep {
		/**
		 * choose automatically the method for selecting<br>
		 * representative color from each box<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:21</i>
		 */
		public static final int REP_AUTO = 0;
		/**
		 * choose the center of the box<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:22</i>
		 */
		public static final int REP_CENTER_BOX = 1;
		/**
		 * choose the average all the color<br>
		 * in the box (specified in Heckbert's paper)<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:24</i>
		 */
		public static final int REP_AVERAGE_COLORS = 2;
		/**
		 * choose the average all the pixels in the box<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:25</i>
		 */
		public static final int REP_AVERAGE_PIXELS = 3;
	};
	/**
	 * method for diffusing<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:38</i><br>
	 * enum values
	 */
	public static interface methodForDiffuse {
		/**
		 * choose diffusion type automatically<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:29</i>
		 */
		public static final int DIFFUSE_AUTO = 0;
		/**
		 * don't diffuse<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:30</i>
		 */
		public static final int DIFFUSE_NONE = 1;
		/**
		 * diffuse with Bill Atkinson's method<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:31</i>
		 */
		public static final int DIFFUSE_ATKINSON = 2;
		/**
		 * diffuse with Floyd-Steinberg method<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:32</i>
		 */
		public static final int DIFFUSE_FS = 3;
		/**
		 * diffuse with Jarvis, Judice & Ninke method<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:33</i>
		 */
		public static final int DIFFUSE_JAJUNI = 4;
		/**
		 * diffuse with Stucki's method<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:34</i>
		 */
		public static final int DIFFUSE_STUCKI = 5;
		/**
		 * diffuse with Burkes' method<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:35</i>
		 */
		public static final int DIFFUSE_BURKES = 6;
		/**
		 * positionally stable arithmetic dither<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:36</i>
		 */
		public static final int DIFFUSE_A_DITHER = 7;
		/**
		 * positionally stable arithmetic xor based dither<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:37</i>
		 */
		public static final int DIFFUSE_X_DITHER = 8;
	};
	/**
	 * quality modes<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:46</i><br>
	 * enum values
	 */
	public static interface qualityMode {
		/**
		 * choose quality mode automatically<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:41</i>
		 */
		public static final int QUALITY_AUTO = 0;
		/**
		 * high quality palette construction<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:42</i>
		 */
		public static final int QUALITY_HIGH = 1;
		/**
		 * low quality palette construction<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:43</i>
		 */
		public static final int QUALITY_LOW = 2;
		/**
		 * full quality palette construction<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:44</i>
		 */
		public static final int QUALITY_FULL = 3;
		/**
		 * high color<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:45</i>
		 */
		public static final int QUALITY_HIGHCOLOR = 4;
	};
	/**
	 * built-in dither<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:55</i><br>
	 * enum values
	 */
	public static interface builtinDither {
		/**
		 * monochrome terminal with dark background<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:49</i>
		 */
		public static final int BUILTIN_MONO_DARK = 0;
		/**
		 * monochrome terminal with dark background<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:50</i>
		 */
		public static final int BUILTIN_MONO_LIGHT = 1;
		/**
		 * xterm 16color<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:51</i>
		 */
		public static final int BUILTIN_XTERM16 = 2;
		/**
		 * xterm 256color<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:52</i>
		 */
		public static final int BUILTIN_XTERM256 = 3;
		/**
		 * vt340 monochrome<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:53</i>
		 */
		public static final int BUILTIN_VT340_MONO = 4;
		/**
		 * vt340 color<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:54</i>
		 */
		public static final int BUILTIN_VT340_COLOR = 5;
	};
	/**
	 * offset value of enum pixelFormat<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:61</i><br>
	 * enum values
	 */
	public static interface formatType {
		/** <i>native declaration : /usr/include/sixel/sixel.h:58</i> */
		public static final int FORMATTYPE_COLOR = 0;
		/** <i>native declaration : /usr/include/sixel/sixel.h:59</i> */
		public static final int FORMATTYPE_GRAYSCALE = 1 << 6;
		/** <i>native declaration : /usr/include/sixel/sixel.h:60</i> */
		public static final int FORMATTYPE_PALETTE = 1 << 7;
	};
	/**
	 * pixelformat type of input image<br>
	 * NOTE: for compatibility, the value of PIXELFORAMT_COLOR_RGB888 must be 3<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:85</i><br>
	 * enum values
	 */
	public static interface pixelFormat {
		/**
		 * 15bpp<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:67</i>
		 */
		public static final int PIXELFORMAT_RGB555 = (int)SixelLibrary.formatType.FORMATTYPE_COLOR | 0x01;
		/**
		 * 16bpp<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:68</i>
		 */
		public static final int PIXELFORMAT_RGB565 = (int)SixelLibrary.formatType.FORMATTYPE_COLOR | 0x02;
		/**
		 * 24bpp<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:69</i>
		 */
		public static final int PIXELFORMAT_RGB888 = (int)SixelLibrary.formatType.FORMATTYPE_COLOR | 0x03;
		/**
		 * 15bpp<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:70</i>
		 */
		public static final int PIXELFORMAT_BGR555 = (int)SixelLibrary.formatType.FORMATTYPE_COLOR | 0x04;
		/**
		 * 16bpp<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:71</i>
		 */
		public static final int PIXELFORMAT_BGR565 = (int)SixelLibrary.formatType.FORMATTYPE_COLOR | 0x05;
		/**
		 * 24bpp<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:72</i>
		 */
		public static final int PIXELFORMAT_BGR888 = (int)SixelLibrary.formatType.FORMATTYPE_COLOR | 0x06;
		/**
		 * 32bpp<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:73</i>
		 */
		public static final int PIXELFORMAT_ARGB8888 = (int)SixelLibrary.formatType.FORMATTYPE_COLOR | 0x10;
		/**
		 * 32bpp<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:74</i>
		 */
		public static final int PIXELFORMAT_RGBA8888 = (int)SixelLibrary.formatType.FORMATTYPE_COLOR | 0x11;
		/**
		 * 1bpp grayscale<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:75</i>
		 */
		public static final int PIXELFORMAT_G1 = (int)SixelLibrary.formatType.FORMATTYPE_GRAYSCALE | 0x00;
		/**
		 * 2bpp grayscale<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:76</i>
		 */
		public static final int PIXELFORMAT_G2 = (int)SixelLibrary.formatType.FORMATTYPE_GRAYSCALE | 0x01;
		/**
		 * 4bpp grayscale<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:77</i>
		 */
		public static final int PIXELFORMAT_G4 = (int)SixelLibrary.formatType.FORMATTYPE_GRAYSCALE | 0x02;
		/**
		 * 8bpp grayscale<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:78</i>
		 */
		public static final int PIXELFORMAT_G8 = (int)SixelLibrary.formatType.FORMATTYPE_GRAYSCALE | 0x03;
		/**
		 * 16bpp gray+alpha<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:79</i>
		 */
		public static final int PIXELFORMAT_AG88 = (int)SixelLibrary.formatType.FORMATTYPE_GRAYSCALE | 0x13;
		/**
		 * 16bpp gray+alpha<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:80</i>
		 */
		public static final int PIXELFORMAT_GA88 = (int)SixelLibrary.formatType.FORMATTYPE_GRAYSCALE | 0x23;
		/**
		 * 1bpp palette<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:81</i>
		 */
		public static final int PIXELFORMAT_PAL1 = (int)SixelLibrary.formatType.FORMATTYPE_PALETTE | 0x00;
		/**
		 * 2bpp palette<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:82</i>
		 */
		public static final int PIXELFORMAT_PAL2 = (int)SixelLibrary.formatType.FORMATTYPE_PALETTE | 0x01;
		/**
		 * 4bpp palette<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:83</i>
		 */
		public static final int PIXELFORMAT_PAL4 = (int)SixelLibrary.formatType.FORMATTYPE_PALETTE | 0x02;
		/**
		 * 8bpp palette<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:84</i>
		 */
		public static final int PIXELFORMAT_PAL8 = (int)SixelLibrary.formatType.FORMATTYPE_PALETTE | 0x03;
	};
	/**
	 * palette type<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:91</i><br>
	 * enum values
	 */
	public static interface paletteType {
		/**
		 * choose palette type automatically<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:88</i>
		 */
		public static final int PALETTETYPE_AUTO = 0;
		/**
		 * HLS colorspace<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:89</i>
		 */
		public static final int PALETTETYPE_HLS = 1;
		/**
		 * RGB colorspace<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:90</i>
		 */
		public static final int PALETTETYPE_RGB = 2;
	};
	/**
	 * policies of SIXEL encoding<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:97</i><br>
	 * enum values
	 */
	public static interface encodePolicy {
		/**
		 * choose encoding policy automatically<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:94</i>
		 */
		public static final int ENCODEPOLICY_AUTO = 0;
		/**
		 * encode as fast as possible<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:95</i>
		 */
		public static final int ENCODEPOLICY_FAST = 1;
		/**
		 * encode to as small sixel sequence as possible<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:96</i>
		 */
		public static final int ENCODEPOLICY_SIZE = 2;
	};
	/**
	 * method for re-sampling<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:110</i><br>
	 * enum values
	 */
	public static interface methodForResampling {
		/**
		 * Use nearest neighbor method<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:100</i>
		 */
		public static final int RES_NEAREST = 0;
		/**
		 * Use guaussian filter<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:101</i>
		 */
		public static final int RES_GAUSSIAN = 1;
		/**
		 * Use hanning filter<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:102</i>
		 */
		public static final int RES_HANNING = 2;
		/**
		 * Use hamming filter<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:103</i>
		 */
		public static final int RES_HAMMING = 3;
		/**
		 * Use bilinear filter<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:104</i>
		 */
		public static final int RES_BILINEAR = 4;
		/**
		 * Use welsh filter<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:105</i>
		 */
		public static final int RES_WELSH = 5;
		/**
		 * Use bicubic filter<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:106</i>
		 */
		public static final int RES_BICUBIC = 6;
		/**
		 * Use lanczos-2 filter<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:107</i>
		 */
		public static final int RES_LANCZOS2 = 7;
		/**
		 * Use lanczos-3 filter<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:108</i>
		 */
		public static final int RES_LANCZOS3 = 8;
		/**
		 * Use lanczos-4 filter<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:109</i>
		 */
		public static final int RES_LANCZOS4 = 9;
	};
	/**
	 * image loader/writer API<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:453</i><br>
	 * enum values
	 */
	public static interface imageFormat {
		/**
		 * read only<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:441</i>
		 */
		public static final int FORMAT_GIF = 0;
		/**
		 * read/write<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:442</i>
		 */
		public static final int FORMAT_PNG = 1;
		/**
		 * read only<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:443</i>
		 */
		public static final int FORMAT_BMP = 2;
		/**
		 * read only<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:444</i>
		 */
		public static final int FORMAT_JPG = 3;
		/**
		 * read only<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:445</i>
		 */
		public static final int FORMAT_TGA = 4;
		/**
		 * read only with --with-gd configure option<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:446</i>
		 */
		public static final int FORMAT_WBMP = 5;
		/**
		 * read only<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:447</i>
		 */
		public static final int FORMAT_TIFF = 6;
		/**
		 * read only<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:448</i>
		 */
		public static final int FORMAT_SIXEL = 7;
		/**
		 * read only<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:449</i>
		 */
		public static final int FORMAT_PNM = 8;
		/**
		 * read only with --with-gd configure option<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:450</i>
		 */
		public static final int FORMAT_GD2 = 9;
		/**
		 * read only<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:451</i>
		 */
		public static final int FORMAT_PSD = 10;
		/**
		 * read only<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:452</i>
		 */
		public static final int FORMAT_HDR = 11;
	};
	/**
	 * loop mode<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:459</i><br>
	 * enum values
	 */
	public static interface loopControl {
		/**
		 * honer the setting of GIF header<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:456</i>
		 */
		public static final int LOOP_AUTO = 0;
		/**
		 * always enable loop<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:457</i>
		 */
		public static final int LOOP_FORCE = 1;
		/**
		 * always disable loop<br>
		 * <i>native declaration : /usr/include/sixel/sixel.h:458</i>
		 */
		public static final int LOOP_DISABLE = 2;
	};
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final String LIBSIXEL_VERSION = (String)"1.10.3";
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final String PACKAGE_VERSION = (String)"1.10.3";
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final String LIBSIXEL_ABI_VERSION = (String)"@LS_LT_CURRENT@:@LS_LT_REVISION@:@LS_LT_AGE@";
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final String LS_LTVERSION = (String)"@LS_LT_CURRENT@:@LS_LT_REVISION@:@LS_LT_AGE@";
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final String PACKAGE_DESCRIPTION = (String)"A lightweight, fast C implementation of DEC SIXEL graphics codec";
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_OUTPUT_PACKET_SIZE = (int)16384;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PALETTE_MIN = (int)2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PALETTE_MAX = (int)256;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_USE_DEPRECATED_SYMBOLS = (int)1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_ALLOCATE_BYTES_MAX = (int)(10248 * 1024 * 128);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_WIDTH_LIMIT = (int)1000000;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_HEIGHT_LIMIT = (int)1000000;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_DEFALUT_GIF_DELAY = (int)1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_OK = (int)0x0000;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FALSE = (int)0x1000;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RUNTIME_ERROR = (int)(0x1000 | 0x0100);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_LOGIC_ERROR = (int)(0x1000 | 0x0200);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FEATURE_ERROR = (int)(0x1000 | 0x0300);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_LIBC_ERROR = (int)(0x1000 | 0x0400);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_CURL_ERROR = (int)(0x1000 | 0x0500);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_JPEG_ERROR = (int)(0x1000 | 0x0600);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PNG_ERROR = (int)(0x1000 | 0x0700);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_GDK_ERROR = (int)(0x1000 | 0x0800);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_GD_ERROR = (int)(0x1000 | 0x0900);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_STBI_ERROR = (int)(0x1000 | 0x0a00);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_STBIW_ERROR = (int)(0x1000 | 0x0b00);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_INTERRUPTED = (int)(0x0000 | 0x0001);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BAD_ALLOCATION = (int)((0x1000 | 0x0100) | 0x0001);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BAD_ARGUMENT = (int)((0x1000 | 0x0100) | 0x0002);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BAD_INPUT = (int)((0x1000 | 0x0100) | 0x0003);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BAD_INTEGER_OVERFLOW = (int)((0x1000 | 0x0100) | 0x0004);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_NOT_IMPLEMENTED = (int)((0x1000 | 0x0300) | 0x0001);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_LARGE_AUTO = (int)0x0;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_LARGE_NORM = (int)0x1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_LARGE_LUM = (int)0x2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_REP_AUTO = (int)0x0;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_REP_CENTER_BOX = (int)0x1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_REP_AVERAGE_COLORS = (int)0x2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_REP_AVERAGE_PIXELS = (int)0x3;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_DIFFUSE_AUTO = (int)0x0;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_DIFFUSE_NONE = (int)0x1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_DIFFUSE_ATKINSON = (int)0x2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_DIFFUSE_FS = (int)0x3;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_DIFFUSE_JAJUNI = (int)0x4;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_DIFFUSE_STUCKI = (int)0x5;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_DIFFUSE_BURKES = (int)0x6;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_DIFFUSE_A_DITHER = (int)0x7;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_DIFFUSE_X_DITHER = (int)0x8;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_QUALITY_AUTO = (int)0x0;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_QUALITY_HIGH = (int)0x1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_QUALITY_LOW = (int)0x2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_QUALITY_FULL = (int)0x3;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_QUALITY_HIGHCOLOR = (int)0x4;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BUILTIN_MONO_DARK = (int)0x0;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BUILTIN_MONO_LIGHT = (int)0x1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BUILTIN_XTERM16 = (int)0x2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BUILTIN_XTERM256 = (int)0x3;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BUILTIN_VT340_MONO = (int)0x4;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BUILTIN_VT340_COLOR = (int)0x5;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BUILTIN_G1 = (int)0x6;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BUILTIN_G2 = (int)0x7;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BUILTIN_G4 = (int)0x8;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_BUILTIN_G8 = (int)0x9;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMATTYPE_COLOR = (int)(0);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMATTYPE_GRAYSCALE = (int)(1 << 6);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMATTYPE_PALETTE = (int)(1 << 7);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_RGB555 = (int)((0) | 0x01);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_RGB565 = (int)((0) | 0x02);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_RGB888 = (int)((0) | 0x03);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_BGR555 = (int)((0) | 0x04);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_BGR565 = (int)((0) | 0x05);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_BGR888 = (int)((0) | 0x06);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_ARGB8888 = (int)((0) | 0x10);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_RGBA8888 = (int)((0) | 0x11);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_ABGR8888 = (int)((0) | 0x12);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_BGRA8888 = (int)((0) | 0x13);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_G1 = (int)((1 << 6) | 0x00);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_G2 = (int)((1 << 6) | 0x01);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_G4 = (int)((1 << 6) | 0x02);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_G8 = (int)((1 << 6) | 0x03);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_AG88 = (int)((1 << 6) | 0x13);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_GA88 = (int)((1 << 6) | 0x23);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_PAL1 = (int)((1 << 7) | 0x00);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_PAL2 = (int)((1 << 7) | 0x01);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_PAL4 = (int)((1 << 7) | 0x02);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PIXELFORMAT_PAL8 = (int)((1 << 7) | 0x03);
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PALETTETYPE_AUTO = (int)0;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PALETTETYPE_HLS = (int)1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_PALETTETYPE_RGB = (int)2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_ENCODEPOLICY_AUTO = (int)0;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_ENCODEPOLICY_FAST = (int)1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_ENCODEPOLICY_SIZE = (int)2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RES_NEAREST = (int)0;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RES_GAUSSIAN = (int)1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RES_HANNING = (int)2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RES_HAMMING = (int)3;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RES_BILINEAR = (int)4;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RES_WELSH = (int)5;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RES_BICUBIC = (int)6;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RES_LANCZOS2 = (int)7;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RES_LANCZOS3 = (int)8;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_RES_LANCZOS4 = (int)9;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_GIF = (int)0x0;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_PNG = (int)0x1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_BMP = (int)0x2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_JPG = (int)0x3;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_TGA = (int)0x4;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_WBMP = (int)0x5;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_TIFF = (int)0x6;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_SIXEL = (int)0x7;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_PNM = (int)0x8;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_GD2 = (int)0x9;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_PSD = (int)0xa;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_FORMAT_HDR = (int)0xb;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_LOOP_AUTO = (int)0;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_LOOP_FORCE = (int)1;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final int SIXEL_LOOP_DISABLE = (int)2;
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_INPUT = (char)('i');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_OUTPUT = (char)('o');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_OUTFILE = (char)('o');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_7BIT_MODE = (char)('7');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_8BIT_MODE = (char)('8');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_HAS_GRI_ARG_LIMIT = (char)('R');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_COLORS = (char)('p');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_MAPFILE = (char)('m');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_MONOCHROME = (char)('e');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_INSECURE = (char)('k');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_INVERT = (char)('i');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_HIGH_COLOR = (char)('I');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_USE_MACRO = (char)('u');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_MACRO_NUMBER = (char)('n');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_COMPLEXION_SCORE = (char)('C');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_IGNORE_DELAY = (char)('g');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_STATIC = (char)('S');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_DIFFUSION = (char)('d');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_FIND_LARGEST = (char)('f');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_SELECT_COLOR = (char)('s');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_CROP = (char)('c');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_WIDTH = (char)('w');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_HEIGHT = (char)('h');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_RESAMPLING = (char)('r');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_QUALITY = (char)('q');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_LOOPMODE = (char)('l');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_PALETTE_TYPE = (char)('t');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_BUILTIN_PALETTE = (char)('b');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_ENCODE_POLICY = (char)('E');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_ORMODE = (char)('O');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_BGCOLOR = (char)('B');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_PENETRATE = (char)('P');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_PIPE_MODE = (char)('D');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_VERBOSE = (char)('v');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_VERSION = (char)('V');
	/** <i>native declaration : /usr/include/sixel/sixel.h</i> */
	public static final char SIXEL_OPTFLAG_HELP = (char)('H');
	/** <i>native declaration : /usr/include/sixel/sixel.h:111</i> */
	public interface sixel_malloc_t extends Callback {
		Pointer apply(SizeT size_t1);
	};
	/** <i>native declaration : /usr/include/sixel/sixel.h:112</i> */
	public interface sixel_calloc_t extends Callback {
		Pointer apply(SizeT size_t1, SizeT size_t2);
	};
	/** <i>native declaration : /usr/include/sixel/sixel.h:113</i> */
	public interface sixel_realloc_t extends Callback {
		Pointer apply(Pointer voidPtr1, SizeT size_t1);
	};
	/** <i>native declaration : /usr/include/sixel/sixel.h:114</i> */
	public interface sixel_free_t extends Callback {
		void apply(Pointer voidPtr1);
	};
	/** <i>native declaration : /usr/include/sixel/sixel.h:167</i> */
	public interface sixel_write_function extends Callback {
		int apply(Pointer data, int size, Pointer priv);
	};
	/** <i>native declaration : /usr/include/sixel/sixel.h:357</i> */
	public interface sixel_allocator_function extends Callback {
		Pointer apply(SizeT size);
	};
	/** <i>native declaration : /usr/include/sixel/sixel.h:567</i> */
	public interface sixel_load_image_function extends Callback {
		int apply(Pointer frame, Pointer context);
	};
	/**
	 * create allocator object<br>
	 * Original signature : <code>SIXELSTATUS sixel_allocator_new(sixel_allocator_t**, sixel_malloc_t, sixel_calloc_t, sixel_realloc_t, sixel_free_t)</code><br>
	 * @param ppallocator allocator object to be created<br>
	 * @param fn_malloc custom malloc() function<br>
	 * @param fn_calloc custom calloc() function<br>
	 * @param fn_realloc custom realloc() function<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:126</i>
	 */
	int sixel_allocator_new(PointerByReference ppallocator, SixelLibrary.sixel_malloc_t fn_malloc, SixelLibrary.sixel_calloc_t fn_calloc, SixelLibrary.sixel_realloc_t fn_realloc, SixelLibrary.sixel_free_t fn_free);
	/**
	 * increase reference count of allocator object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_allocator_ref(sixel_allocator_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:131</i><br>
	 * @deprecated use the safer method {@link #sixel_allocator_ref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_allocator_ref(Pointer allocator);
	/**
	 * increase reference count of allocator object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_allocator_ref(sixel_allocator_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:131</i>
	 */
	void sixel_allocator_ref(PointerByReference allocator);
	/**
	 * decrease reference count of output context object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_allocator_unref(sixel_allocator_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:136</i><br>
	 * @deprecated use the safer method {@link #sixel_allocator_unref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_allocator_unref(Pointer allocator);
	/**
	 * decrease reference count of output context object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_allocator_unref(sixel_allocator_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:136</i>
	 */
	void sixel_allocator_unref(PointerByReference allocator);
	/**
	 * call custom malloc()<br>
	 * Original signature : <code>void* sixel_allocator_malloc(sixel_allocator_t*, size_t)</code><br>
	 * @param allocator allocator object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:142</i><br>
	 * @deprecated use the safer method {@link #sixel_allocator_malloc(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer sixel_allocator_malloc(Pointer allocator, SizeT n);
	/**
	 * call custom malloc()<br>
	 * Original signature : <code>void* sixel_allocator_malloc(sixel_allocator_t*, size_t)</code><br>
	 * @param allocator allocator object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:142</i>
	 */
	Pointer sixel_allocator_malloc(PointerByReference allocator, SizeT n);
	/**
	 * call custom calloc()<br>
	 * Original signature : <code>void* sixel_allocator_calloc(sixel_allocator_t*, size_t, size_t)</code><br>
	 * @param allocator allocator object<br>
	 * @param nelm allocation size<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:149</i><br>
	 * @deprecated use the safer method {@link #sixel_allocator_calloc(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer sixel_allocator_calloc(Pointer allocator, SizeT nelm, SizeT elsize);
	/**
	 * call custom calloc()<br>
	 * Original signature : <code>void* sixel_allocator_calloc(sixel_allocator_t*, size_t, size_t)</code><br>
	 * @param allocator allocator object<br>
	 * @param nelm allocation size<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:149</i>
	 */
	Pointer sixel_allocator_calloc(PointerByReference allocator, SizeT nelm, SizeT elsize);
	/**
	 * call custom realloc()<br>
	 * Original signature : <code>void* sixel_allocator_realloc(sixel_allocator_t*, void*, size_t)</code><br>
	 * @param allocator allocator object<br>
	 * @param p existing buffer to be re-allocated<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:156</i><br>
	 * @deprecated use the safer method {@link #sixel_allocator_realloc(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer sixel_allocator_realloc(Pointer allocator, Pointer p, SizeT n);
	/**
	 * call custom realloc()<br>
	 * Original signature : <code>void* sixel_allocator_realloc(sixel_allocator_t*, void*, size_t)</code><br>
	 * @param allocator allocator object<br>
	 * @param p existing buffer to be re-allocated<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:156</i>
	 */
	Pointer sixel_allocator_realloc(PointerByReference allocator, Pointer p, SizeT n);
	/**
	 * call custom free()<br>
	 * Original signature : <code>void sixel_allocator_free(sixel_allocator_t*, void*)</code><br>
	 * @param allocator allocator object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:162</i><br>
	 * @deprecated use the safer method {@link #sixel_allocator_free(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void sixel_allocator_free(Pointer allocator, Pointer p);
	/**
	 * call custom free()<br>
	 * Original signature : <code>void sixel_allocator_free(sixel_allocator_t*, void*)</code><br>
	 * @param allocator allocator object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:162</i>
	 */
	void sixel_allocator_free(PointerByReference allocator, Pointer p);
	/**
	 * create new output context object<br>
	 * Original signature : <code>SIXELSTATUS sixel_output_new(sixel_output_t**, sixel_write_function, void*, sixel_allocator_t*)</code><br>
	 * @param output output object to be created<br>
	 * @param fn_write callback for output sixel<br>
	 * @param priv private data given as<br>3rd argument of fn_write<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:176</i><br>
	 * @deprecated use the safer method {@link #sixel_output_new(com.sun.jna.ptr.PointerByReference, sixel.SixelLibrary.sixel_write_function, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_output_new(PointerByReference output, SixelLibrary.sixel_write_function fn_write, Pointer priv, Pointer allocator);
	/**
	 * create new output context object<br>
	 * Original signature : <code>SIXELSTATUS sixel_output_new(sixel_output_t**, sixel_write_function, void*, sixel_allocator_t*)</code><br>
	 * @param output output object to be created<br>
	 * @param fn_write callback for output sixel<br>
	 * @param priv private data given as<br>3rd argument of fn_write<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:176</i>
	 */
	int sixel_output_new(PointerByReference output, SixelLibrary.sixel_write_function fn_write, Pointer priv, PointerByReference allocator);
	/**
	 * deprecated: create an output object<br>
	 * Original signature : <code>sixel_output_t* sixel_output_create(sixel_write_function, void*)</code><br>
	 * @param fn_write callback for output sixel<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:182</i>
	 */
	PointerByReference sixel_output_create(SixelLibrary.sixel_write_function fn_write, Pointer priv);
	/**
	 * destroy output context object<br>
	 * Original signature : <code>void sixel_output_destroy(sixel_output_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:187</i><br>
	 * @deprecated use the safer method {@link #sixel_output_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_output_destroy(Pointer output);
	/**
	 * destroy output context object<br>
	 * Original signature : <code>void sixel_output_destroy(sixel_output_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:187</i>
	 */
	void sixel_output_destroy(PointerByReference output);
	/**
	 * increase reference count of output context object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_output_ref(sixel_output_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:192</i><br>
	 * @deprecated use the safer method {@link #sixel_output_ref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_output_ref(Pointer output);
	/**
	 * increase reference count of output context object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_output_ref(sixel_output_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:192</i>
	 */
	void sixel_output_ref(PointerByReference output);
	/**
	 * decrease reference count of output context object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_output_unref(sixel_output_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:197</i><br>
	 * @deprecated use the safer method {@link #sixel_output_unref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_output_unref(Pointer output);
	/**
	 * decrease reference count of output context object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_output_unref(sixel_output_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:197</i>
	 */
	void sixel_output_unref(PointerByReference output);
	/**
	 * get 8bit output mode which indicates whether it uses C1 control characters<br>
	 * Original signature : <code>int sixel_output_get_8bit_availability(sixel_output_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:202</i><br>
	 * @deprecated use the safer method {@link #sixel_output_get_8bit_availability(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_output_get_8bit_availability(Pointer output);
	/**
	 * get 8bit output mode which indicates whether it uses C1 control characters<br>
	 * Original signature : <code>int sixel_output_get_8bit_availability(sixel_output_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:202</i>
	 */
	int sixel_output_get_8bit_availability(PointerByReference output);
	/**
	 * set 8bit output mode state<br>
	 * Original signature : <code>void sixel_output_set_8bit_availability(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:208</i><br>
	 * @deprecated use the safer method {@link #sixel_output_set_8bit_availability(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_output_set_8bit_availability(Pointer output, int availability);
	/**
	 * set 8bit output mode state<br>
	 * Original signature : <code>void sixel_output_set_8bit_availability(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:208</i>
	 */
	void sixel_output_set_8bit_availability(PointerByReference output, int availability);
	/**
	 * set whether limit arguments of DECGRI('!') to 255<br>
	 * Original signature : <code>void sixel_output_set_gri_arg_limit(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:214</i><br>
	 * @deprecated use the safer method {@link #sixel_output_set_gri_arg_limit(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_output_set_gri_arg_limit(Pointer output, int value);
	/**
	 * set whether limit arguments of DECGRI('!') to 255<br>
	 * Original signature : <code>void sixel_output_set_gri_arg_limit(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:214</i>
	 */
	void sixel_output_set_gri_arg_limit(PointerByReference output, int value);
	/**
	 * set GNU Screen penetration feature enable or disable<br>
	 * Original signature : <code>void sixel_output_set_penetrate_multiplexer(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:220</i><br>
	 * @deprecated use the safer method {@link #sixel_output_set_penetrate_multiplexer(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_output_set_penetrate_multiplexer(Pointer output, int penetrate);
	/**
	 * set GNU Screen penetration feature enable or disable<br>
	 * Original signature : <code>void sixel_output_set_penetrate_multiplexer(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:220</i>
	 */
	void sixel_output_set_penetrate_multiplexer(PointerByReference output, int penetrate);
	/**
	 * set whether we skip DCS envelope<br>
	 * Original signature : <code>void sixel_output_set_skip_dcs_envelope(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:226</i><br>
	 * @deprecated use the safer method {@link #sixel_output_set_skip_dcs_envelope(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_output_set_skip_dcs_envelope(Pointer output, int skip);
	/**
	 * set whether we skip DCS envelope<br>
	 * Original signature : <code>void sixel_output_set_skip_dcs_envelope(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:226</i>
	 */
	void sixel_output_set_skip_dcs_envelope(PointerByReference output, int skip);
	/**
	 * set palette type: RGB or HLS<br>
	 * Original signature : <code>void sixel_output_set_palette_type(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:232</i><br>
	 * @deprecated use the safer method {@link #sixel_output_set_palette_type(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_output_set_palette_type(Pointer output, int palettetype);
	/**
	 * set palette type: RGB or HLS<br>
	 * Original signature : <code>void sixel_output_set_palette_type(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:232</i>
	 */
	void sixel_output_set_palette_type(PointerByReference output, int palettetype);
	/**
	 * Original signature : <code>void sixel_output_set_ormode(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:237</i><br>
	 * @deprecated use the safer method {@link #sixel_output_set_ormode(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_output_set_ormode(Pointer output, int ormode);
	/**
	 * Original signature : <code>void sixel_output_set_ormode(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:237</i>
	 */
	void sixel_output_set_ormode(PointerByReference output, int ormode);
	/**
	 * set encodeing policy: auto, fast or size<br>
	 * Original signature : <code>void sixel_output_set_encode_policy(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:243</i><br>
	 * @deprecated use the safer method {@link #sixel_output_set_encode_policy(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_output_set_encode_policy(Pointer output, int encode_policy);
	/**
	 * set encodeing policy: auto, fast or size<br>
	 * Original signature : <code>void sixel_output_set_encode_policy(sixel_output_t*, int)</code><br>
	 * @param output output context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:243</i>
	 */
	void sixel_output_set_encode_policy(PointerByReference output, int encode_policy);
	/**
	 * create dither context object<br>
	 * Original signature : <code>SIXELSTATUS sixel_dither_new(sixel_dither_t**, int, sixel_allocator_t*)</code><br>
	 * @param ppdither dither object to be created<br>
	 * @param ncolors required colors<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:255</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_new(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_dither_new(PointerByReference ppdither, int ncolors, Pointer allocator);
	/**
	 * create dither context object<br>
	 * Original signature : <code>SIXELSTATUS sixel_dither_new(sixel_dither_t**, int, sixel_allocator_t*)</code><br>
	 * @param ppdither dither object to be created<br>
	 * @param ncolors required colors<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:255</i>
	 */
	int sixel_dither_new(PointerByReference ppdither, int ncolors, PointerByReference allocator);
	/**
	 * create dither context object<br>
	 * Original signature : <code>sixel_dither_t* sixel_dither_create(int)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:260</i>
	 */
	PointerByReference sixel_dither_create(int ncolors);
	/**
	 * get built-in dither context object<br>
	 * Original signature : <code>sixel_dither_t* sixel_dither_get(int)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:265</i>
	 */
	PointerByReference sixel_dither_get(int builtin_dither);
	/**
	 * destroy dither context object<br>
	 * Original signature : <code>void sixel_dither_destroy(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:270</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_destroy(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_dither_destroy(Pointer dither);
	/**
	 * destroy dither context object<br>
	 * Original signature : <code>void sixel_dither_destroy(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:270</i>
	 */
	void sixel_dither_destroy(PointerByReference dither);
	/**
	 * increase reference count of dither context object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_dither_ref(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:275</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_ref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_dither_ref(Pointer dither);
	/**
	 * increase reference count of dither context object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_dither_ref(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:275</i>
	 */
	void sixel_dither_ref(PointerByReference dither);
	/**
	 * decrease reference count of dither context object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_dither_unref(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:280</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_unref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_dither_unref(Pointer dither);
	/**
	 * decrease reference count of dither context object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_dither_unref(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:280</i>
	 */
	void sixel_dither_unref(PointerByReference dither);
	/**
	 * initialize internal palette from specified pixel buffer<br>
	 * Original signature : <code>SIXELSTATUS sixel_dither_initialize(sixel_dither_t*, unsigned char*, int, int, int, int, int, int)</code><br>
	 * @param dither dither context object<br>
	 * @param data sample image<br>
	 * @param width image width<br>
	 * @param height image height<br>
	 * @param pixelformat one of enum pixelFormat<br>
	 * @param method_for_largest method for finding the largest dimension<br>
	 * @param method_for_rep method for choosing a color from the box<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:292</i><br>
	 * @deprecated use the safer methods {@link #sixel_dither_initialize(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, int, int, int, int, int, int)} and {@link #sixel_dither_initialize(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, int, int, int, int, int)} instead
	 */
	@Deprecated 
	int sixel_dither_initialize(Pointer dither, Pointer data, int width, int height, int pixelformat, int method_for_largest, int method_for_rep, int quality_mode);
	/**
	 * initialize internal palette from specified pixel buffer<br>
	 * Original signature : <code>SIXELSTATUS sixel_dither_initialize(sixel_dither_t*, unsigned char*, int, int, int, int, int, int)</code><br>
	 * @param dither dither context object<br>
	 * @param data sample image<br>
	 * @param width image width<br>
	 * @param height image height<br>
	 * @param pixelformat one of enum pixelFormat<br>
	 * @param method_for_largest method for finding the largest dimension<br>
	 * @param method_for_rep method for choosing a color from the box<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:292</i>
	 */
	int sixel_dither_initialize(PointerByReference dither, ByteBuffer data, int width, int height, int pixelformat, int method_for_largest, int method_for_rep, int quality_mode);
	int sixel_dither_initialize(PointerByReference dither, ByteBuffer data, int width, int height, int pixelformat);
	/**
	 * initialize internal palette from specified pixel buffer<br>
	 * Original signature : <code>SIXELSTATUS sixel_dither_initialize(sixel_dither_t*, unsigned char*, int, int, int, int, int, int)</code><br>
	 * @param dither dither context object<br>
	 * @param data sample image<br>
	 * @param width image width<br>
	 * @param height image height<br>
	 * @param pixelformat one of enum pixelFormat<br>
	 * @param method_for_largest method for finding the largest dimension<br>
	 * @param method_for_rep method for choosing a color from the box<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:292</i>
	 */
	int sixel_dither_initialize(PointerByReference dither, Pointer data, int width, int height, int pixelformat, int method_for_largest, int method_for_rep, int quality_mode);
	/**
	 * set diffusion type, choose from enum methodForDiffuse<br>
	 * Original signature : <code>void sixel_dither_set_diffusion_type(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:298</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_set_diffusion_type(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_dither_set_diffusion_type(Pointer dither, int method_for_diffuse);
	/**
	 * set diffusion type, choose from enum methodForDiffuse<br>
	 * Original signature : <code>void sixel_dither_set_diffusion_type(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:298</i>
	 */
	void sixel_dither_set_diffusion_type(PointerByReference dither, int method_for_diffuse);
	/**
	 * get number of palette colors<br>
	 * Original signature : <code>int sixel_dither_get_num_of_palette_colors(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:303</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_get_num_of_palette_colors(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_dither_get_num_of_palette_colors(Pointer dither);
	/**
	 * get number of palette colors<br>
	 * Original signature : <code>int sixel_dither_get_num_of_palette_colors(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:303</i>
	 */
	int sixel_dither_get_num_of_palette_colors(PointerByReference dither);
	/**
	 * get number of histogram colors<br>
	 * Original signature : <code>int sixel_dither_get_num_of_histogram_colors(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:308</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_get_num_of_histogram_colors(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_dither_get_num_of_histogram_colors(Pointer dither);
	/**
	 * get number of histogram colors<br>
	 * Original signature : <code>int sixel_dither_get_num_of_histogram_colors(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:308</i>
	 */
	int sixel_dither_get_num_of_histogram_colors(PointerByReference dither);
	/**
	 * typoed! remains for compatibility.<br>
	 * Original signature : <code>int sixel_dither_get_num_of_histgram_colors(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:313</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_get_num_of_histgram_colors(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_dither_get_num_of_histgram_colors(Pointer dither);
	/**
	 * typoed! remains for compatibility.<br>
	 * Original signature : <code>int sixel_dither_get_num_of_histgram_colors(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:313</i>
	 */
	int sixel_dither_get_num_of_histgram_colors(PointerByReference dither);
	/**
	 * get palette<br>
	 * Original signature : <code>char* sixel_dither_get_palette(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:318</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_get_palette(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer sixel_dither_get_palette(Pointer dither);
	/**
	 * get palette<br>
	 * Original signature : <code>char* sixel_dither_get_palette(sixel_dither_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:318</i>
	 */
	Pointer sixel_dither_get_palette(PointerByReference dither);
	/**
	 * set palette<br>
	 * Original signature : <code>void sixel_dither_set_palette(sixel_dither_t*, unsigned char*)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:324</i><br>
	 * @deprecated use the safer methods {@link #sixel_dither_set_palette(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer)} and {@link #sixel_dither_set_palette(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void sixel_dither_set_palette(Pointer dither, Pointer palette);
	/**
	 * set palette<br>
	 * Original signature : <code>void sixel_dither_set_palette(sixel_dither_t*, unsigned char*)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:324</i>
	 */
	void sixel_dither_set_palette(PointerByReference dither, ByteBuffer palette);
	/**
	 * set palette<br>
	 * Original signature : <code>void sixel_dither_set_palette(sixel_dither_t*, unsigned char*)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:324</i>
	 */
	void sixel_dither_set_palette(PointerByReference dither, Pointer palette);
	/**
	 * set the factor of complexion color correcting<br>
	 * Original signature : <code>void sixel_dither_set_complexion_score(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:330</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_set_complexion_score(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_dither_set_complexion_score(Pointer dither, int score);
	/**
	 * set the factor of complexion color correcting<br>
	 * Original signature : <code>void sixel_dither_set_complexion_score(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:330</i>
	 */
	void sixel_dither_set_complexion_score(PointerByReference dither, int score);
	/**
	 * set whether omitting palette difinition<br>
	 * Original signature : <code>void sixel_dither_set_body_only(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:336</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_set_body_only(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_dither_set_body_only(Pointer dither, int bodyonly);
	/**
	 * set whether omitting palette difinition<br>
	 * Original signature : <code>void sixel_dither_set_body_only(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:336</i>
	 */
	void sixel_dither_set_body_only(PointerByReference dither, int bodyonly);
	/**
	 * set whether optimize palette size<br>
	 * Original signature : <code>void sixel_dither_set_optimize_palette(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:342</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_set_optimize_palette(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_dither_set_optimize_palette(Pointer dither, int do_opt);
	/**
	 * set whether optimize palette size<br>
	 * Original signature : <code>void sixel_dither_set_optimize_palette(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:342</i>
	 */
	void sixel_dither_set_optimize_palette(PointerByReference dither, int do_opt);
	/**
	 * set pixelformat<br>
	 * Original signature : <code>void sixel_dither_set_pixelformat(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:348</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_set_pixelformat(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_dither_set_pixelformat(Pointer dither, int pixelformat);
	/**
	 * set pixelformat<br>
	 * Original signature : <code>void sixel_dither_set_pixelformat(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:348</i>
	 */
	void sixel_dither_set_pixelformat(PointerByReference dither, int pixelformat);
	/**
	 * set transparent<br>
	 * Original signature : <code>void sixel_dither_set_transparent(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:354</i><br>
	 * @deprecated use the safer method {@link #sixel_dither_set_transparent(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void sixel_dither_set_transparent(Pointer dither, int transparent);
	/**
	 * set transparent<br>
	 * Original signature : <code>void sixel_dither_set_transparent(sixel_dither_t*, int)</code><br>
	 * @param dither dither context object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:354</i>
	 */
	void sixel_dither_set_transparent(PointerByReference dither, int transparent);
	/**
	 * convert pixels into sixel format and write it to output context<br>
	 * Original signature : <code>SIXELSTATUS sixel_encode(unsigned char*, int, int, int, sixel_dither_t*, sixel_output_t*)</code><br>
	 * @param pixels pixel bytes<br>
	 * @param width image width<br>
	 * @param height image height<br>
	 * @param depth color depth: now unused<br>
	 * @param dither dither context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:368</i><br>
	 * @deprecated use the safer methods {@link #sixel_encode(java.nio.ByteBuffer, int, int, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #sixel_encode(com.sun.jna.Pointer, int, int, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_encode(Pointer pixels, int width, int height, int depth, Pointer dither, Pointer context);
	/**
	 * convert pixels into sixel format and write it to output context<br>
	 * Original signature : <code>SIXELSTATUS sixel_encode(unsigned char*, int, int, int, sixel_dither_t*, sixel_output_t*)</code><br>
	 * @param pixels pixel bytes<br>
	 * @param width image width<br>
	 * @param height image height<br>
	 * @param depth color depth: now unused<br>
	 * @param dither dither context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:368</i>
	 */
	int sixel_encode(ByteBuffer pixels, int width, int height, int depth, PointerByReference dither, PointerByReference context);
	/**
	 * convert pixels into sixel format and write it to output context<br>
	 * Original signature : <code>SIXELSTATUS sixel_encode(unsigned char*, int, int, int, sixel_dither_t*, sixel_output_t*)</code><br>
	 * @param pixels pixel bytes<br>
	 * @param width image width<br>
	 * @param height image height<br>
	 * @param depth color depth: now unused<br>
	 * @param dither dither context<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:368</i>
	 */
	int sixel_encode(Pointer pixels, int width, int height, int depth, PointerByReference dither, PointerByReference context);
	/**
	 * convert sixel data into indexed pixel bytes and palette data<br>
	 * Original signature : <code>SIXELSTATUS sixel_decode_raw(unsigned char*, int, unsigned char**, int*, int*, unsigned char**, int*, sixel_allocator_t*)</code><br>
	 * @param p sixel bytes<br>
	 * @param len size of sixel bytes<br>
	 * @param pixels decoded pixels<br>
	 * @param pwidth image width<br>
	 * @param pheight image height<br>
	 * @param palette ARGB palette<br>
	 * @param ncolors palette size (<= 256)<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:380</i><br>
	 * @deprecated use the safer methods {@link #sixel_decode_raw(java.nio.ByteBuffer, int, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #sixel_decode_raw(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_decode_raw(Pointer p, int len, PointerByReference pixels, IntByReference pwidth, IntByReference pheight, PointerByReference palette, IntByReference ncolors, Pointer allocator);
	/**
	 * convert sixel data into indexed pixel bytes and palette data<br>
	 * Original signature : <code>SIXELSTATUS sixel_decode_raw(unsigned char*, int, unsigned char**, int*, int*, unsigned char**, int*, sixel_allocator_t*)</code><br>
	 * @param p sixel bytes<br>
	 * @param len size of sixel bytes<br>
	 * @param pixels decoded pixels<br>
	 * @param pwidth image width<br>
	 * @param pheight image height<br>
	 * @param palette ARGB palette<br>
	 * @param ncolors palette size (<= 256)<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:380</i>
	 */
	int sixel_decode_raw(ByteBuffer p, int len, PointerByReference pixels, IntBuffer pwidth, IntBuffer pheight, PointerByReference palette, IntBuffer ncolors, PointerByReference allocator);
	/**
	 * convert sixel data into indexed pixel bytes and palette data<br>
	 * Original signature : <code>SIXELSTATUS sixel_decode_raw(unsigned char*, int, unsigned char**, int*, int*, unsigned char**, int*, sixel_allocator_t*)</code><br>
	 * @param p sixel bytes<br>
	 * @param len size of sixel bytes<br>
	 * @param pixels decoded pixels<br>
	 * @param pwidth image width<br>
	 * @param pheight image height<br>
	 * @param palette ARGB palette<br>
	 * @param ncolors palette size (<= 256)<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:380</i>
	 */
	int sixel_decode_raw(Pointer p, int len, PointerByReference pixels, IntByReference pwidth, IntByReference pheight, PointerByReference palette, IntByReference ncolors, PointerByReference allocator);
	/**
	 * Original signature : <code>SIXELSTATUS sixel_decode(unsigned char*, int, unsigned char**, int*, int*, unsigned char**, int*, sixel_allocator_function)</code><br>
	 * @param sixels sixel bytes<br>
	 * @param size size of sixel bytes<br>
	 * @param pixels decoded pixels<br>
	 * @param pwidth image width<br>
	 * @param pheight image height<br>
	 * @param palette RGBA palette<br>
	 * @param ncolors palette size (<= 256)<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:391</i><br>
	 * @deprecated use the safer methods {@link #sixel_decode(java.nio.ByteBuffer, int, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, sixel.SixelLibrary.sixel_allocator_function)} and {@link #sixel_decode(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, sixel.SixelLibrary.sixel_allocator_function)} instead
	 */
	@Deprecated 
	int sixel_decode(Pointer sixels, int size, PointerByReference pixels, IntByReference pwidth, IntByReference pheight, PointerByReference palette, IntByReference ncolors, SixelLibrary.sixel_allocator_function fn_malloc);
	/**
	 * Original signature : <code>SIXELSTATUS sixel_decode(unsigned char*, int, unsigned char**, int*, int*, unsigned char**, int*, sixel_allocator_function)</code><br>
	 * @param sixels sixel bytes<br>
	 * @param size size of sixel bytes<br>
	 * @param pixels decoded pixels<br>
	 * @param pwidth image width<br>
	 * @param pheight image height<br>
	 * @param palette RGBA palette<br>
	 * @param ncolors palette size (<= 256)<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:391</i>
	 */
	int sixel_decode(ByteBuffer sixels, int size, PointerByReference pixels, IntBuffer pwidth, IntBuffer pheight, PointerByReference palette, IntBuffer ncolors, SixelLibrary.sixel_allocator_function fn_malloc);
	/**
	 * Original signature : <code>void sixel_helper_set_additional_message(const char*)</code><br>
	 * @param message error message<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:398</i><br>
	 * @deprecated use the safer methods {@link #sixel_helper_set_additional_message(java.lang.String)} and {@link #sixel_helper_set_additional_message(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void sixel_helper_set_additional_message(Pointer message);
	/**
	 * Original signature : <code>void sixel_helper_set_additional_message(const char*)</code><br>
	 * @param message error message<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:398</i>
	 */
	void sixel_helper_set_additional_message(String message);
	/**
	 * Original signature : <code>const char* sixel_helper_get_additional_message()</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:400</i>
	 */
	Pointer sixel_helper_get_additional_message();
	/**
	 * convert error status code int formatted string<br>
	 * Original signature : <code>const char* sixel_helper_format_error(SIXELSTATUS)</code><br>
	 * @param status status code<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:406</i>
	 */
	Pointer sixel_helper_format_error(int status);
	/**
	 * compute pixel depth from pixelformat<br>
	 * Original signature : <code>int sixel_helper_compute_depth(int)</code><br>
	 * @param pixelformat one of enum pixelFormat<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:412</i>
	 */
	int sixel_helper_compute_depth(int pixelformat);
	/**
	 * convert pixelFormat into PIXELFORMAT_RGB888<br>
	 * Original signature : <code>SIXELSTATUS sixel_helper_normalize_pixelformat(unsigned char*, int*, unsigned const char*, int, int, int)</code><br>
	 * @param dst destination buffer<br>
	 * @param dst_pixelformat converted pixelformat<br>
	 * @param src source pixels<br>
	 * @param src_pixelformat format of source image<br>
	 * @param width width of source image<br>
	 * @param height height of source image<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:423</i><br>
	 * @deprecated use the safer methods {@link #sixel_helper_normalize_pixelformat(java.nio.ByteBuffer, java.nio.IntBuffer, byte[], int, int, int)} and {@link #sixel_helper_normalize_pixelformat(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, int, int, int)} instead
	 */
	@Deprecated 
	int sixel_helper_normalize_pixelformat(Pointer dst, IntByReference dst_pixelformat, Pointer src, int src_pixelformat, int width, int height);
	/**
	 * convert pixelFormat into PIXELFORMAT_RGB888<br>
	 * Original signature : <code>SIXELSTATUS sixel_helper_normalize_pixelformat(unsigned char*, int*, unsigned const char*, int, int, int)</code><br>
	 * @param dst destination buffer<br>
	 * @param dst_pixelformat converted pixelformat<br>
	 * @param src source pixels<br>
	 * @param src_pixelformat format of source image<br>
	 * @param width width of source image<br>
	 * @param height height of source image<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:423</i>
	 */
	int sixel_helper_normalize_pixelformat(ByteBuffer dst, IntBuffer dst_pixelformat, byte src[], int src_pixelformat, int width, int height);
	/**
	 * scale image to specified size<br>
	 * Original signature : <code>SIXELSTATUS sixel_helper_scale_image(unsigned char*, unsigned const char*, int, int, int, int, int, int, sixel_allocator_t*)</code><br>
	 * @param dst destination buffer<br>
	 * @param src source image data<br>
	 * @param srcw source image width<br>
	 * @param srch source image height<br>
	 * @param pixelformat one of enum pixelFormat<br>
	 * @param dstw destination image width<br>
	 * @param dsth destination image height<br>
	 * @param method_for_resampling one of methodForResampling<br>
	 * @param allocator allocator object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:437</i><br>
	 * @deprecated use the safer methods {@link #sixel_helper_scale_image(java.nio.ByteBuffer, byte[], int, int, int, int, int, int, com.sun.jna.ptr.PointerByReference)} and {@link #sixel_helper_scale_image(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, int, int, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_helper_scale_image(Pointer dst, Pointer src, int srcw, int srch, int pixelformat, int dstw, int dsth, int method_for_resampling, Pointer allocator);
	/**
	 * scale image to specified size<br>
	 * Original signature : <code>SIXELSTATUS sixel_helper_scale_image(unsigned char*, unsigned const char*, int, int, int, int, int, int, sixel_allocator_t*)</code><br>
	 * @param dst destination buffer<br>
	 * @param src source image data<br>
	 * @param srcw source image width<br>
	 * @param srch source image height<br>
	 * @param pixelformat one of enum pixelFormat<br>
	 * @param dstw destination image width<br>
	 * @param dsth destination image height<br>
	 * @param method_for_resampling one of methodForResampling<br>
	 * @param allocator allocator object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:437</i>
	 */
	int sixel_helper_scale_image(ByteBuffer dst, byte src[], int srcw, int srch, int pixelformat, int dstw, int dsth, int method_for_resampling, PointerByReference allocator);
	/**
	 * scale image to specified size<br>
	 * Original signature : <code>SIXELSTATUS sixel_helper_scale_image(unsigned char*, unsigned const char*, int, int, int, int, int, int, sixel_allocator_t*)</code><br>
	 * @param dst destination buffer<br>
	 * @param src source image data<br>
	 * @param srcw source image width<br>
	 * @param srch source image height<br>
	 * @param pixelformat one of enum pixelFormat<br>
	 * @param dstw destination image width<br>
	 * @param dsth destination image height<br>
	 * @param method_for_resampling one of methodForResampling<br>
	 * @param allocator allocator object<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:437</i>
	 */
	int sixel_helper_scale_image(Pointer dst, Pointer src, int srcw, int srch, int pixelformat, int dstw, int dsth, int method_for_resampling, PointerByReference allocator);
	/**
	 * constructor of frame object<br>
	 * Original signature : <code>SIXELSTATUS sixel_frame_new(sixel_frame_t**, sixel_allocator_t*)</code><br>
	 * @param ppframe frame object to be created<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:469</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_frame_new(PointerByReference ppframe, Pointer allocator);
	/**
	 * constructor of frame object<br>
	 * Original signature : <code>SIXELSTATUS sixel_frame_new(sixel_frame_t**, sixel_allocator_t*)</code><br>
	 * @param ppframe frame object to be created<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:469</i>
	 */
	int sixel_frame_new(PointerByReference ppframe, PointerByReference allocator);
	/**
	 * deprecated version of sixel_frame_new()<br>
	 * Original signature : <code>sixel_frame_t* sixel_frame_create()</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:474</i>
	 */
	PointerByReference sixel_frame_create();
	/**
	 * increase reference count of frame object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_frame_ref(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:479</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_ref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_frame_ref(Pointer frame);
	/**
	 * increase reference count of frame object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_frame_ref(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:479</i>
	 */
	void sixel_frame_ref(PointerByReference frame);
	/**
	 * decrease reference count of frame object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_frame_unref(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:484</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_unref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_frame_unref(Pointer frame);
	/**
	 * decrease reference count of frame object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_frame_unref(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:484</i>
	 */
	void sixel_frame_unref(PointerByReference frame);
	/**
	 * initialize frame object with a pixel buffer<br>
	 * Original signature : <code>SIXELSTATUS sixel_frame_init(sixel_frame_t*, unsigned char*, int, int, int, unsigned char*, int)</code><br>
	 * @param frame frame object to be initialize<br>
	 * @param pixels pixel buffer<br>
	 * @param width pixel width of buffer<br>
	 * @param height pixel height of buffer<br>
	 * @param pixelformat pixelformat of buffer<br>
	 * @param palette palette for buffer or NULL<br>
	 * @param ncolors number of palette colors or (-1)<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:496</i><br>
	 * @deprecated use the safer methods {@link #sixel_frame_init(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, int, int, int, java.nio.ByteBuffer, int)} and {@link #sixel_frame_init(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, int, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int sixel_frame_init(Pointer frame, Pointer pixels, int width, int height, int pixelformat, Pointer palette, int ncolors);
	/**
	 * initialize frame object with a pixel buffer<br>
	 * Original signature : <code>SIXELSTATUS sixel_frame_init(sixel_frame_t*, unsigned char*, int, int, int, unsigned char*, int)</code><br>
	 * @param frame frame object to be initialize<br>
	 * @param pixels pixel buffer<br>
	 * @param width pixel width of buffer<br>
	 * @param height pixel height of buffer<br>
	 * @param pixelformat pixelformat of buffer<br>
	 * @param palette palette for buffer or NULL<br>
	 * @param ncolors number of palette colors or (-1)<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:496</i>
	 */
	int sixel_frame_init(PointerByReference frame, ByteBuffer pixels, int width, int height, int pixelformat, ByteBuffer palette, int ncolors);
	/**
	 * initialize frame object with a pixel buffer<br>
	 * Original signature : <code>SIXELSTATUS sixel_frame_init(sixel_frame_t*, unsigned char*, int, int, int, unsigned char*, int)</code><br>
	 * @param frame frame object to be initialize<br>
	 * @param pixels pixel buffer<br>
	 * @param width pixel width of buffer<br>
	 * @param height pixel height of buffer<br>
	 * @param pixelformat pixelformat of buffer<br>
	 * @param palette palette for buffer or NULL<br>
	 * @param ncolors number of palette colors or (-1)<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:496</i>
	 */
	int sixel_frame_init(PointerByReference frame, Pointer pixels, int width, int height, int pixelformat, Pointer palette, int ncolors);
	/**
	 * get pixels<br>
	 * Original signature : <code>char* sixel_frame_get_pixels(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:501</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_pixels(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer sixel_frame_get_pixels(Pointer frame);
	/**
	 * get pixels<br>
	 * Original signature : <code>char* sixel_frame_get_pixels(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:501</i>
	 */
	Pointer sixel_frame_get_pixels(PointerByReference frame);
	/**
	 * get palette<br>
	 * Original signature : <code>char* sixel_frame_get_palette(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:506</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_palette(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer sixel_frame_get_palette(Pointer frame);
	/**
	 * get palette<br>
	 * Original signature : <code>char* sixel_frame_get_palette(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:506</i>
	 */
	Pointer sixel_frame_get_palette(PointerByReference frame);
	/**
	 * get width<br>
	 * Original signature : <code>int sixel_frame_get_width(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:511</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_width(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_frame_get_width(Pointer frame);
	/**
	 * get width<br>
	 * Original signature : <code>int sixel_frame_get_width(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:511</i>
	 */
	int sixel_frame_get_width(PointerByReference frame);
	/**
	 * get height<br>
	 * Original signature : <code>int sixel_frame_get_height(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:516</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_height(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_frame_get_height(Pointer frame);
	/**
	 * get height<br>
	 * Original signature : <code>int sixel_frame_get_height(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:516</i>
	 */
	int sixel_frame_get_height(PointerByReference frame);
	/**
	 * get ncolors<br>
	 * Original signature : <code>int sixel_frame_get_ncolors(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:521</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_ncolors(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_frame_get_ncolors(Pointer frame);
	/**
	 * get ncolors<br>
	 * Original signature : <code>int sixel_frame_get_ncolors(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:521</i>
	 */
	int sixel_frame_get_ncolors(PointerByReference frame);
	/**
	 * get pixelformat<br>
	 * Original signature : <code>int sixel_frame_get_pixelformat(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:526</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_pixelformat(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_frame_get_pixelformat(Pointer frame);
	/**
	 * get pixelformat<br>
	 * Original signature : <code>int sixel_frame_get_pixelformat(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:526</i>
	 */
	int sixel_frame_get_pixelformat(PointerByReference frame);
	/**
	 * get transparent<br>
	 * Original signature : <code>int sixel_frame_get_transparent(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:531</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_transparent(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_frame_get_transparent(Pointer frame);
	/**
	 * get transparent<br>
	 * Original signature : <code>int sixel_frame_get_transparent(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:531</i>
	 */
	int sixel_frame_get_transparent(PointerByReference frame);
	/**
	 * get transparent<br>
	 * Original signature : <code>int sixel_frame_get_multiframe(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:536</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_multiframe(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_frame_get_multiframe(Pointer frame);
	/**
	 * get transparent<br>
	 * Original signature : <code>int sixel_frame_get_multiframe(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:536</i>
	 */
	int sixel_frame_get_multiframe(PointerByReference frame);
	/**
	 * get delay<br>
	 * Original signature : <code>int sixel_frame_get_delay(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:541</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_delay(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_frame_get_delay(Pointer frame);
	/**
	 * get delay<br>
	 * Original signature : <code>int sixel_frame_get_delay(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:541</i>
	 */
	int sixel_frame_get_delay(PointerByReference frame);
	/**
	 * get frame no<br>
	 * Original signature : <code>int sixel_frame_get_frame_no(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:546</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_frame_no(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_frame_get_frame_no(Pointer frame);
	/**
	 * get frame no<br>
	 * Original signature : <code>int sixel_frame_get_frame_no(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:546</i>
	 */
	int sixel_frame_get_frame_no(PointerByReference frame);
	/**
	 * get loop no<br>
	 * Original signature : <code>int sixel_frame_get_loop_no(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:551</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_get_loop_no(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_frame_get_loop_no(Pointer frame);
	/**
	 * get loop no<br>
	 * Original signature : <code>int sixel_frame_get_loop_no(sixel_frame_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:551</i>
	 */
	int sixel_frame_get_loop_no(PointerByReference frame);
	/**
	 * strip alpha from RGBA/ARGB formatted pixbuf<br>
	 * Original signature : <code>int sixel_frame_strip_alpha(sixel_frame_t*, unsigned char*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:556</i><br>
	 * @deprecated use the safer methods {@link #sixel_frame_strip_alpha(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer)} and {@link #sixel_frame_strip_alpha(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sixel_frame_strip_alpha(Pointer frame, Pointer bgcolor);
	/**
	 * strip alpha from RGBA/ARGB formatted pixbuf<br>
	 * Original signature : <code>int sixel_frame_strip_alpha(sixel_frame_t*, unsigned char*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:556</i>
	 */
	int sixel_frame_strip_alpha(PointerByReference frame, ByteBuffer bgcolor);
	/**
	 * strip alpha from RGBA/ARGB formatted pixbuf<br>
	 * Original signature : <code>int sixel_frame_strip_alpha(sixel_frame_t*, unsigned char*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:556</i>
	 */
	int sixel_frame_strip_alpha(PointerByReference frame, Pointer bgcolor);
	/**
	 * resize a frame to given size with specified resampling filter<br>
	 * Original signature : <code>SIXELSTATUS sixel_frame_resize(sixel_frame_t*, int, int, int)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:561</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_resize(com.sun.jna.ptr.PointerByReference, int, int, int)} instead
	 */
	@Deprecated 
	int sixel_frame_resize(Pointer frame, int width, int height, int method_for_resampling);
	/**
	 * resize a frame to given size with specified resampling filter<br>
	 * Original signature : <code>SIXELSTATUS sixel_frame_resize(sixel_frame_t*, int, int, int)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:561</i>
	 */
	int sixel_frame_resize(PointerByReference frame, int width, int height, int method_for_resampling);
	/**
	 * clip frame<br>
	 * Original signature : <code>SIXELSTATUS sixel_frame_clip(sixel_frame_t*, int, int, int, int)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:566</i><br>
	 * @deprecated use the safer method {@link #sixel_frame_clip(com.sun.jna.ptr.PointerByReference, int, int, int, int)} instead
	 */
	@Deprecated 
	int sixel_frame_clip(Pointer frame, int x, int y, int width, int height);
	/**
	 * clip frame<br>
	 * Original signature : <code>SIXELSTATUS sixel_frame_clip(sixel_frame_t*, int, int, int, int)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:566</i>
	 */
	int sixel_frame_clip(PointerByReference frame, int x, int y, int width, int height);
	/**
	 * Original signature : <code>SIXELSTATUS sixel_helper_load_image_file(const char*, int, int, int, unsigned char*, int, sixel_load_image_function, int, const int*, void*, sixel_allocator_t*)</code><br>
	 * @param filename source file name<br>
	 * @param fstatic whether to extract static image<br>
	 * @param fuse_palette whether to use paletted image<br>
	 * @param reqcolors requested number of colors<br>
	 * @param bgcolor background color<br>
	 * @param loop_control one of enum loopControl<br>
	 * @param fn_load callback<br>
	 * @param finsecure true if do not verify SSL<br>
	 * @param cancel_flag cancel flag<br>
	 * @param context private data for callback<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:581</i><br>
	 * @deprecated use the safer methods {@link #sixel_helper_load_image_file(java.lang.String, int, int, int, java.nio.ByteBuffer, int, sixel.SixelLibrary.sixel_load_image_function, int, int[], com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} and {@link #sixel_helper_load_image_file(com.sun.jna.Pointer, int, int, int, com.sun.jna.Pointer, int, sixel.SixelLibrary.sixel_load_image_function, int, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_helper_load_image_file(Pointer filename, int fstatic, int fuse_palette, int reqcolors, Pointer bgcolor, int loop_control, SixelLibrary.sixel_load_image_function fn_load, int finsecure, IntByReference cancel_flag, Pointer context, Pointer allocator);
	/**
	 * Original signature : <code>SIXELSTATUS sixel_helper_load_image_file(const char*, int, int, int, unsigned char*, int, sixel_load_image_function, int, const int*, void*, sixel_allocator_t*)</code><br>
	 * @param filename source file name<br>
	 * @param fstatic whether to extract static image<br>
	 * @param fuse_palette whether to use paletted image<br>
	 * @param reqcolors requested number of colors<br>
	 * @param bgcolor background color<br>
	 * @param loop_control one of enum loopControl<br>
	 * @param fn_load callback<br>
	 * @param finsecure true if do not verify SSL<br>
	 * @param cancel_flag cancel flag<br>
	 * @param context private data for callback<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:581</i>
	 */
	int sixel_helper_load_image_file(String filename, int fstatic, int fuse_palette, int reqcolors, ByteBuffer bgcolor, int loop_control, SixelLibrary.sixel_load_image_function fn_load, int finsecure, int cancel_flag[], Pointer context, PointerByReference allocator);
	/**
	 * Original signature : <code>SIXELSTATUS sixel_helper_load_image_file(const char*, int, int, int, unsigned char*, int, sixel_load_image_function, int, const int*, void*, sixel_allocator_t*)</code><br>
	 * @param filename source file name<br>
	 * @param fstatic whether to extract static image<br>
	 * @param fuse_palette whether to use paletted image<br>
	 * @param reqcolors requested number of colors<br>
	 * @param bgcolor background color<br>
	 * @param loop_control one of enum loopControl<br>
	 * @param fn_load callback<br>
	 * @param finsecure true if do not verify SSL<br>
	 * @param cancel_flag cancel flag<br>
	 * @param context private data for callback<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:581</i>
	 */
	int sixel_helper_load_image_file(Pointer filename, int fstatic, int fuse_palette, int reqcolors, Pointer bgcolor, int loop_control, SixelLibrary.sixel_load_image_function fn_load, int finsecure, IntByReference cancel_flag, Pointer context, PointerByReference allocator);
	/**
	 * write image to file<br>
	 * Original signature : <code>SIXELSTATUS sixel_helper_write_image_file(unsigned char*, int, int, unsigned char*, int, const char*, int, sixel_allocator_t*)</code><br>
	 * @param data source pixel data<br>
	 * @param width source data width<br>
	 * @param height source data height<br>
	 * @param palette palette of source data<br>
	 * @param pixelformat source pixelFormat<br>
	 * @param filename destination filename<br>
	 * @param imageformat one of enum imageformat<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:593</i><br>
	 * @deprecated use the safer methods {@link #sixel_helper_write_image_file(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, java.lang.String, int, com.sun.jna.ptr.PointerByReference)} and {@link #sixel_helper_write_image_file(com.sun.jna.Pointer, int, int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_helper_write_image_file(Pointer data, int width, int height, Pointer palette, int pixelformat, Pointer filename, int imageformat, Pointer allocator);
	/**
	 * write image to file<br>
	 * Original signature : <code>SIXELSTATUS sixel_helper_write_image_file(unsigned char*, int, int, unsigned char*, int, const char*, int, sixel_allocator_t*)</code><br>
	 * @param data source pixel data<br>
	 * @param width source data width<br>
	 * @param height source data height<br>
	 * @param palette palette of source data<br>
	 * @param pixelformat source pixelFormat<br>
	 * @param filename destination filename<br>
	 * @param imageformat one of enum imageformat<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:593</i>
	 */
	int sixel_helper_write_image_file(ByteBuffer data, int width, int height, ByteBuffer palette, int pixelformat, String filename, int imageformat, PointerByReference allocator);
	/**
	 * write image to file<br>
	 * Original signature : <code>SIXELSTATUS sixel_helper_write_image_file(unsigned char*, int, int, unsigned char*, int, const char*, int, sixel_allocator_t*)</code><br>
	 * @param data source pixel data<br>
	 * @param width source data width<br>
	 * @param height source data height<br>
	 * @param palette palette of source data<br>
	 * @param pixelformat source pixelFormat<br>
	 * @param filename destination filename<br>
	 * @param imageformat one of enum imageformat<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:593</i>
	 */
	int sixel_helper_write_image_file(Pointer data, int width, int height, Pointer palette, int pixelformat, Pointer filename, int imageformat, PointerByReference allocator);
	/**
	 * create encoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_new(sixel_encoder_t**, sixel_allocator_t*)</code><br>
	 * @param ppencoder encoder object to be created<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:604</i><br>
	 * @deprecated use the safer method {@link #sixel_encoder_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_encoder_new(PointerByReference ppencoder, Pointer allocator);
	/**
	 * create encoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_new(sixel_encoder_t**, sixel_allocator_t*)</code><br>
	 * @param ppencoder encoder object to be created<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:604</i>
	 */
	int sixel_encoder_new(PointerByReference ppencoder, PointerByReference allocator);
	/**
	 * deprecated version of sixel_decoder_new()<br>
	 * Original signature : <code>sixel_encoder_t* sixel_encoder_create()</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:609</i>
	 */
	PointerByReference sixel_encoder_create();
	/**
	 * increase reference count of encoder object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_encoder_ref(sixel_encoder_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:614</i><br>
	 * @deprecated use the safer method {@link #sixel_encoder_ref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_encoder_ref(Pointer encoder);
	/**
	 * increase reference count of encoder object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_encoder_ref(sixel_encoder_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:614</i>
	 */
	void sixel_encoder_ref(PointerByReference encoder);
	/**
	 * decrease reference count of encoder object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_encoder_unref(sixel_encoder_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:619</i><br>
	 * @deprecated use the safer method {@link #sixel_encoder_unref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_encoder_unref(Pointer encoder);
	/**
	 * decrease reference count of encoder object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_encoder_unref(sixel_encoder_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:619</i>
	 */
	void sixel_encoder_unref(PointerByReference encoder);
	/**
	 * set cancel state flag to encoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_set_cancel_flag(sixel_encoder_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:624</i><br>
	 * @deprecated use the safer methods {@link #sixel_encoder_set_cancel_flag(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #sixel_encoder_set_cancel_flag(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int sixel_encoder_set_cancel_flag(Pointer encoder, IntByReference cancel_flag);
	/**
	 * set cancel state flag to encoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_set_cancel_flag(sixel_encoder_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:624</i>
	 */
	int sixel_encoder_set_cancel_flag(PointerByReference encoder, IntBuffer cancel_flag);
	/**
	 * set cancel state flag to encoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_set_cancel_flag(sixel_encoder_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:624</i>
	 */
	int sixel_encoder_set_cancel_flag(PointerByReference encoder, IntByReference cancel_flag);
	/**
	 * set an option flag to encoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_setopt(sixel_encoder_t*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:629</i><br>
	 * @deprecated use the safer methods {@link #sixel_encoder_setopt(com.sun.jna.ptr.PointerByReference, int, java.lang.String)} and {@link #sixel_encoder_setopt(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sixel_encoder_setopt(Pointer encoder, int arg, Pointer optarg);
	/**
	 * set an option flag to encoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_setopt(sixel_encoder_t*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:629</i>
	 */
	int sixel_encoder_setopt(PointerByReference encoder, int arg, String optarg);
	/**
	 * set an option flag to encoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_setopt(sixel_encoder_t*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:629</i>
	 */
	int sixel_encoder_setopt(PointerByReference encoder, int arg, Pointer optarg);
	/**
	 * load source data from specified file and encode it to SIXEL format<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_encode(sixel_encoder_t*, const char*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:634</i><br>
	 * @deprecated use the safer methods {@link #sixel_encoder_encode(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #sixel_encoder_encode(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sixel_encoder_encode(Pointer encoder, Pointer filename);
	/**
	 * load source data from specified file and encode it to SIXEL format<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_encode(sixel_encoder_t*, const char*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:634</i>
	 */
	int sixel_encoder_encode(PointerByReference encoder, String filename);
	/**
	 * load source data from specified file and encode it to SIXEL format<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_encode(sixel_encoder_t*, const char*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:634</i>
	 */
	int sixel_encoder_encode(PointerByReference encoder, Pointer filename);
	/**
	 * encode specified pixel data to SIXEL format<br>
	 * output to encoder->outfd<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_encode_bytes(sixel_encoder_t*, unsigned char*, int, int, int, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:640</i><br>
	 * @deprecated use the safer methods {@link #sixel_encoder_encode_bytes(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, int, int, int, java.nio.ByteBuffer, int)} and {@link #sixel_encoder_encode_bytes(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, int, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int sixel_encoder_encode_bytes(Pointer encoder, Pointer bytes, int width, int height, int pixelformat, Pointer palette, int ncolors);
	/**
	 * encode specified pixel data to SIXEL format<br>
	 * output to encoder->outfd<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_encode_bytes(sixel_encoder_t*, unsigned char*, int, int, int, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:640</i>
	 */
	int sixel_encoder_encode_bytes(PointerByReference encoder, ByteBuffer bytes, int width, int height, int pixelformat, ByteBuffer palette, int ncolors);
	/**
	 * encode specified pixel data to SIXEL format<br>
	 * output to encoder->outfd<br>
	 * Original signature : <code>SIXELSTATUS sixel_encoder_encode_bytes(sixel_encoder_t*, unsigned char*, int, int, int, unsigned char*, int)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:640</i>
	 */
	int sixel_encoder_encode_bytes(PointerByReference encoder, Pointer bytes, int width, int height, int pixelformat, Pointer palette, int ncolors);
	/**
	 * create decoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_decoder_new(sixel_decoder_t**, sixel_allocator_t*)</code><br>
	 * @param ppdecoder decoder object to be created<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:651</i><br>
	 * @deprecated use the safer method {@link #sixel_decoder_new(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_decoder_new(PointerByReference ppdecoder, Pointer allocator);
	/**
	 * create decoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_decoder_new(sixel_decoder_t**, sixel_allocator_t*)</code><br>
	 * @param ppdecoder decoder object to be created<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:651</i>
	 */
	int sixel_decoder_new(PointerByReference ppdecoder, PointerByReference allocator);
	/**
	 * deprecated version of sixel_decoder_new()<br>
	 * Original signature : <code>sixel_decoder_t* sixel_decoder_create()</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:656</i>
	 */
	PointerByReference sixel_decoder_create();
	/**
	 * increase reference count of decoder object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_decoder_ref(sixel_decoder_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:661</i><br>
	 * @deprecated use the safer method {@link #sixel_decoder_ref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_decoder_ref(Pointer decoder);
	/**
	 * increase reference count of decoder object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_decoder_ref(sixel_decoder_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:661</i>
	 */
	void sixel_decoder_ref(PointerByReference decoder);
	/**
	 * decrease reference count of decoder object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_decoder_unref(sixel_decoder_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:666</i><br>
	 * @deprecated use the safer method {@link #sixel_decoder_unref(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void sixel_decoder_unref(Pointer decoder);
	/**
	 * decrease reference count of decoder object (thread-unsafe)<br>
	 * Original signature : <code>void sixel_decoder_unref(sixel_decoder_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:666</i>
	 */
	void sixel_decoder_unref(PointerByReference decoder);
	/**
	 * set an option flag to decoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_decoder_setopt(sixel_decoder_t*, int, const char*)</code><br>
	 * @param decoder decoder object<br>
	 * @param arg one of SIXEL_OPTFLAG_***<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:673</i><br>
	 * @deprecated use the safer methods {@link #sixel_decoder_setopt(com.sun.jna.ptr.PointerByReference, int, java.lang.String)} and {@link #sixel_decoder_setopt(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sixel_decoder_setopt(Pointer decoder, int arg, Pointer optarg);
	/**
	 * set an option flag to decoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_decoder_setopt(sixel_decoder_t*, int, const char*)</code><br>
	 * @param decoder decoder object<br>
	 * @param arg one of SIXEL_OPTFLAG_***<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:673</i>
	 */
	int sixel_decoder_setopt(PointerByReference decoder, int arg, String optarg);
	/**
	 * set an option flag to decoder object<br>
	 * Original signature : <code>SIXELSTATUS sixel_decoder_setopt(sixel_decoder_t*, int, const char*)</code><br>
	 * @param decoder decoder object<br>
	 * @param arg one of SIXEL_OPTFLAG_***<br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:673</i>
	 */
	int sixel_decoder_setopt(PointerByReference decoder, int arg, Pointer optarg);
	/**
	 * load source data from stdin or the file specified with<br>
	 * SIXEL_OPTFLAG_INPUT flag, and decode it<br>
	 * Original signature : <code>SIXELSTATUS sixel_decoder_decode(sixel_decoder_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:679</i><br>
	 * @deprecated use the safer method {@link #sixel_decoder_decode(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int sixel_decoder_decode(Pointer decoder);
	/**
	 * load source data from stdin or the file specified with<br>
	 * SIXEL_OPTFLAG_INPUT flag, and decode it<br>
	 * Original signature : <code>SIXELSTATUS sixel_decoder_decode(sixel_decoder_t*)</code><br>
	 * <i>native declaration : /usr/include/sixel/sixel.h:679</i>
	 */
	int sixel_decoder_decode(PointerByReference decoder);
	public static class sixel_allocator_t extends PointerType {
		public sixel_allocator_t(Pointer address) {
			super(address);
		}
		public sixel_allocator_t() {
			super();
		}
	};
	public static class sixel_encoder_t extends PointerType {
		public sixel_encoder_t(Pointer address) {
			super(address);
		}
		public sixel_encoder_t() {
			super();
		}
	};
	public static class sixel_output_t extends PointerType {
		public sixel_output_t(Pointer address) {
			super(address);
		}
		public sixel_output_t() {
			super();
		}
	};
	public static class sixel_decoder_t extends PointerType {
		public sixel_decoder_t(Pointer address) {
			super(address);
		}
		public sixel_decoder_t() {
			super();
		}
	};
	public static class sixel_frame_t extends PointerType {
		public sixel_frame_t(Pointer address) {
			super(address);
		}
		public sixel_frame_t() {
			super();
		}
	};
	public static class sixel_dither_t extends PointerType {
		public sixel_dither_t(Pointer address) {
			super(address);
		}
		public sixel_dither_t() {
			super();
		}
	};
}
